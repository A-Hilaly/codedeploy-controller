// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha2

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DeploymentSpec defines the desired state of Deployment.
type DeploymentSpec struct {
	// The name of an AWS CodeDeploy application associated with the IAM user or
// AWS account.
	 // +kubebuilder:validation:Required
	ApplicationName *string `json:"applicationName"`
	// Configuration information for an automatic rollback that is added when a
// deployment is created.
	 AutoRollbackConfiguration *AutoRollbackConfiguration `json:"autoRollbackConfiguration,omitempty"` 
	// The name of a deployment configuration associated with the IAM user or AWS
// account.
// 
// If not specified, the value configured in the deployment group is used as
// the default. If the deployment group does not have a deployment configuration
// associated with it, CodeDeployDefault.OneAtATime is used by default.
	 DeploymentConfigName *string `json:"deploymentConfigName,omitempty"` 
	// The name of the deployment group.
	 DeploymentGroupName *string `json:"deploymentGroupName,omitempty"` 
	// A comment about the deployment.
	 Description *string `json:"description,omitempty"` 
	// Information about how AWS CodeDeploy handles files that already exist in
// a deployment target location but weren't part of the previous successful
// deployment.
// 
// The fileExistsBehavior parameter takes any of the following values:
// 
//    * DISALLOW: The deployment fails. This is also the default behavior if
//    no option is specified.
// 
//    * OVERWRITE: The version of the file from the application revision currently
//    being deployed replaces the version already on the instance.
// 
//    * RETAIN: The version of the file already on the instance is kept and
//    used as part of the new deployment.
	 FileExistsBehavior *string `json:"fileExistsBehavior,omitempty"` 
	// If true, then if an ApplicationStop, BeforeBlockTraffic, or AfterBlockTraffic
// deployment lifecycle event to an instance fails, then the deployment continues
// to the next deployment lifecycle event. For example, if ApplicationStop fails,
// the deployment continues with DownloadBundle. If BeforeBlockTraffic fails,
// the deployment continues with BlockTraffic. If AfterBlockTraffic fails, the
// deployment continues with ApplicationStop.
// 
// If false or not specified, then if a lifecycle event fails during a deployment
// to an instance, that deployment fails. If deployment to that instance is
// part of an overall deployment and the number of healthy hosts is not less
// than the minimum number of healthy hosts, then a deployment to the next instance
// is attempted.
// 
// During a deployment, the AWS CodeDeploy agent runs the scripts specified
// for ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic in the AppSpec
// file from the previous successful deployment. (All other scripts are run
// from the AppSpec file in the current deployment.) If one of these scripts
// contains an error and does not run successfully, the deployment can fail.
// 
// If the cause of the failure is a script from the last successful deployment
// that will never run successfully, create a new deployment and use ignoreApplicationStopFailures
// to specify that the ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic
// failures should be ignored.
	 IgnoreApplicationStopFailures *bool `json:"ignoreApplicationStopFailures,omitempty"` 
	// The type and location of the revision to deploy.
	 Revision *RevisionLocation `json:"revision,omitempty"` 
	// Information about the instances that belong to the replacement environment
// in a blue/green deployment.
	 TargetInstances *TargetInstances `json:"targetInstances,omitempty"` 
	// Indicates whether to deploy to all instances or only to instances that are
// not running the latest application revision.
	 UpdateOutdatedInstancesOnly *bool `json:"updateOutdatedInstancesOnly,omitempty"` 
}

// DeploymentStatus defines the observed state of Deployment
type DeploymentStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The unique ID of a deployment.
	DeploymentID *string `json:"deploymentID,omitempty"`
}

// Deployment is the Schema for the Deployments API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Deployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   DeploymentSpec   `json:"spec,omitempty"`
	Status DeploymentStatus `json:"status,omitempty"`
}

// DeploymentList contains a list of Deployment
// +kubebuilder:object:root=true
type DeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []Deployment `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Deployment{}, &DeploymentList{})
}
