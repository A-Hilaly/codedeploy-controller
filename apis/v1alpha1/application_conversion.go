// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.


package v1alpha1

import (
    "encoding/json"
    "fmt"

    ctrlrtconversion "sigs.k8s.io/controller-runtime/pkg/conversion"
    ctrlrt "sigs.k8s.io/controller-runtime"
    ackrtwh "github.com/aws-controllers-k8s/runtime/pkg/webhook"

    v1alpha2 "github.com/aws-controllers-k8s/codedeploy-controller/apis/v1alpha2"
)

var (
    _ = fmt.Printf
    _ = json.Marshal
)

func init() {
    webhook := ackrtwh.New(
        "conversion",
        "Application",
        "v1alpha1",
		func(mgr ctrlrt.Manager) error {
			return ctrlrt.NewWebhookManagedBy(mgr).
				For(&Application{}).
				Complete()
		},
    )
    if err := ackrtwh.RegisterWebhook(webhook); err != nil {
        msg := fmt.Sprintf("cannot register webhook: %v", err)
        panic(msg)
    }
}

// Assert convertible interface implementation Application
var _ ctrlrtconversion.Convertible = &Application{}

// ConvertTo converts this Application to the Hub version (v1alpha2).
func (src *Application) ConvertTo(dstRaw ctrlrtconversion.Hub) error {
	dst := dstRaw.(*v1alpha2.Application)
	dst.Spec.ApplicationName = src.Spec.ApplicationName
	dst.Spec.ComputePlatform = src.Spec.ComputePlatform
	if src.Spec.Tags != nil {
		tagListCopy := make([]*v1alpha2.Tag, 0, len(src.Spec.Tags))
		for i, element := range src.Spec.Tags {
			_ = i // non-used value guard.
			elementCopy := &v1alpha2.Tag{}
			if element != nil {
				tagCopy := &v1alpha2.Tag{}
				tagCopy.Key = element.Key
				tagCopy.Value = element.Value
				elementCopy = tagCopy
			}

			tagListCopy = append(tagListCopy, elementCopy)
		}
		dst.Spec.Tags = tagListCopy
	}

	dst.Status.ApplicationID = src.Status.ApplicationID
	dst.Status.ACKResourceMetadata = src.Status.ACKResourceMetadata
	dst.Status.Conditions = src.Status.Conditions

	dst.ObjectMeta = src.ObjectMeta
	return nil
}

// ConvertFrom converts the Hub version (v1alpha2) to this Application.
func (dst *Application) ConvertFrom(srcRaw ctrlrtconversion.Hub) error {
	src := srcRaw.(*v1alpha2.Application)
	dst.Spec.ApplicationName = src.Spec.ApplicationName
	dst.Spec.ComputePlatform = src.Spec.ComputePlatform
	if src.Spec.Tags != nil {
		tagListCopy := make([]*Tag, 0, len(src.Spec.Tags))
		for i, element := range src.Spec.Tags {
			_ = i // non-used value guard.
			elementCopy := &Tag{}
			if element != nil {
				tagCopy := &Tag{}
				tagCopy.Key = element.Key
				tagCopy.Value = element.Value
				elementCopy = tagCopy
			}

			tagListCopy = append(tagListCopy, elementCopy)
		}
		dst.Spec.Tags = tagListCopy
	}

	dst.Status.ApplicationID = src.Status.ApplicationID
	dst.Status.ACKResourceMetadata = src.Status.ACKResourceMetadata
	dst.Status.Conditions = src.Status.Conditions

	dst.ObjectMeta = src.ObjectMeta
	return nil
}