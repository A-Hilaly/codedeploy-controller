// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.


package v1alpha1

import (
    "encoding/json"
    "fmt"

    ctrlrtconversion "sigs.k8s.io/controller-runtime/pkg/conversion"
    ctrlrt "sigs.k8s.io/controller-runtime"
    ackrtwh "github.com/aws-controllers-k8s/runtime/pkg/webhook"

    v1alpha2 "github.com/aws-controllers-k8s/codedeploy-controller/apis/v1alpha2"
)

var (
    _ = fmt.Printf
    _ = json.Marshal
)

func init() {
    webhook := ackrtwh.New(
        "conversion",
        "Deployment",
        "v1alpha1",
		func(mgr ctrlrt.Manager) error {
			return ctrlrt.NewWebhookManagedBy(mgr).
				For(&Deployment{}).
				Complete()
		},
    )
    if err := ackrtwh.RegisterWebhook(webhook); err != nil {
        msg := fmt.Sprintf("cannot register webhook: %v", err)
        panic(msg)
    }
}

// Assert convertible interface implementation Deployment
var _ ctrlrtconversion.Convertible = &Deployment{}

// ConvertTo converts this Deployment to the Hub version (v1alpha2).
func (src *Deployment) ConvertTo(dstRaw ctrlrtconversion.Hub) error {
	dst := dstRaw.(*v1alpha2.Deployment)
	dst.Spec.ApplicationName = src.Spec.ApplicationName
	if src.Spec.AutoRollbackConfiguration != nil {
		autoRollbackConfigurationCopy := &v1alpha2.AutoRollbackConfiguration{}
		autoRollbackConfigurationCopy.Enabled = src.Spec.AutoRollbackConfiguration.Enabled
		src.Spec.AutoRollbackConfiguration.Events = autoRollbackConfigurationCopy.Events
		dst.Spec.AutoRollbackConfiguration = autoRollbackConfigurationCopy
	}

	dst.Spec.DeploymentConfigName = src.Spec.DeploymentConfigName
	dst.Spec.DeploymentGroupName = src.Spec.DeploymentGroupName
	dst.Spec.Description = src.Spec.Description
	dst.Spec.FileExistsBehavior = src.Spec.FileExistsBehavior
	dst.Spec.IgnoreApplicationStopFailures = src.Spec.IgnoreApplicationStopFailures
	if src.Spec.Revision != nil {
		revisionLocationCopy := &v1alpha2.RevisionLocation{}
		if src.Spec.Revision.AppSpecContent != nil {
			appSpecContentCopy := &v1alpha2.AppSpecContent{}
			appSpecContentCopy.Content = src.Spec.Revision.AppSpecContent.Content
			appSpecContentCopy.SHA256 = src.Spec.Revision.AppSpecContent.SHA256
			revisionLocationCopy.AppSpecContent = appSpecContentCopy
		}

		if src.Spec.Revision.GitHubLocation != nil {
			gitHubLocationCopy := &v1alpha2.GitHubLocation{}
			gitHubLocationCopy.CommitID = src.Spec.Revision.GitHubLocation.CommitID
			gitHubLocationCopy.Repository = src.Spec.Revision.GitHubLocation.Repository
			revisionLocationCopy.GitHubLocation = gitHubLocationCopy
		}

		revisionLocationCopy.RevisionType = src.Spec.Revision.RevisionType
		if src.Spec.Revision.S3Location != nil {
			s3LocationCopy := &v1alpha2.S3Location{}
			s3LocationCopy.Bucket = src.Spec.Revision.S3Location.Bucket
			s3LocationCopy.BundleType = src.Spec.Revision.S3Location.BundleType
			s3LocationCopy.ETag = src.Spec.Revision.S3Location.ETag
			s3LocationCopy.Key = src.Spec.Revision.S3Location.Key
			s3LocationCopy.Version = src.Spec.Revision.S3Location.Version
			revisionLocationCopy.S3Location = s3LocationCopy
		}

		if src.Spec.Revision.String != nil {
			rawStringCopy := &v1alpha2.RawString{}
			rawStringCopy.Content = src.Spec.Revision.String.Content
			rawStringCopy.SHA256 = src.Spec.Revision.String.SHA256
			revisionLocationCopy.String = rawStringCopy
		}

		dst.Spec.Revision = revisionLocationCopy
	}

	if src.Spec.TargetInstances != nil {
		targetInstancesCopy := &v1alpha2.TargetInstances{}
		src.Spec.TargetInstances.AutoScalingGroups = targetInstancesCopy.AutoScalingGroups
		if src.Spec.TargetInstances.EC2TagSet != nil {
			ec2TagSetCopy := &v1alpha2.EC2TagSet{}
			if src.Spec.TargetInstances.EC2TagSet.EC2TagSetList != nil {
				ec2TagSetListCopy := make([][]*v1alpha2.EC2TagFilter, 0, len(src.Spec.TargetInstances.EC2TagSet.EC2TagSetList))
				for i, element := range src.Spec.TargetInstances.EC2TagSet.EC2TagSetList {
					_ = i // non-used value guard.
					elementCopy := make([]*v1alpha2.EC2TagFilter, 0, len(element))
					if element != nil {
						ec2TagFilterListCopy := make([]*v1alpha2.EC2TagFilter, 0, len(element))
						for i, element := range element {
							_ = i // non-used value guard.
							elementCopy := &v1alpha2.EC2TagFilter{}
							if element != nil {
								ec2TagFilterCopy := &v1alpha2.EC2TagFilter{}
								ec2TagFilterCopy.Key = element.Key
								ec2TagFilterCopy.Type = element.Type
								ec2TagFilterCopy.Value = element.Value
								elementCopy = ec2TagFilterCopy
							}

							ec2TagFilterListCopy = append(ec2TagFilterListCopy, elementCopy)
						}
						elementCopy = ec2TagFilterListCopy
					}

					ec2TagSetListCopy = append(ec2TagSetListCopy, elementCopy)
				}
				ec2TagSetCopy.EC2TagSetList = ec2TagSetListCopy
			}

			targetInstancesCopy.EC2TagSet = ec2TagSetCopy
		}

		if src.Spec.TargetInstances.TagFilters != nil {
			ec2TagFilterListCopy := make([]*v1alpha2.EC2TagFilter, 0, len(src.Spec.TargetInstances.TagFilters))
			for i, element := range src.Spec.TargetInstances.TagFilters {
				_ = i // non-used value guard.
				elementCopy := &v1alpha2.EC2TagFilter{}
				if element != nil {
					ec2TagFilterCopy := &v1alpha2.EC2TagFilter{}
					ec2TagFilterCopy.Key = element.Key
					ec2TagFilterCopy.Type = element.Type
					ec2TagFilterCopy.Value = element.Value
					elementCopy = ec2TagFilterCopy
				}

				ec2TagFilterListCopy = append(ec2TagFilterListCopy, elementCopy)
			}
			targetInstancesCopy.TagFilters = ec2TagFilterListCopy
		}

		dst.Spec.TargetInstances = targetInstancesCopy
	}

	dst.Spec.UpdateOutdatedInstancesOnly = src.Spec.UpdateOutdatedInstancesOnly
	dst.Status.DeploymentID = src.Status.DeploymentID
	dst.Status.ACKResourceMetadata = src.Status.ACKResourceMetadata
	dst.Status.Conditions = src.Status.Conditions

	dst.ObjectMeta = src.ObjectMeta
	return nil
}

// ConvertFrom converts the Hub version (v1alpha2) to this Deployment.
func (dst *Deployment) ConvertFrom(srcRaw ctrlrtconversion.Hub) error {
	src := srcRaw.(*v1alpha2.Deployment)
	dst.Spec.ApplicationName = src.Spec.ApplicationName
	if src.Spec.AutoRollbackConfiguration != nil {
		autoRollbackConfigurationCopy := &AutoRollbackConfiguration{}
		autoRollbackConfigurationCopy.Enabled = src.Spec.AutoRollbackConfiguration.Enabled
		src.Spec.AutoRollbackConfiguration.Events = autoRollbackConfigurationCopy.Events
		dst.Spec.AutoRollbackConfiguration = autoRollbackConfigurationCopy
	}

	dst.Spec.DeploymentConfigName = src.Spec.DeploymentConfigName
	dst.Spec.DeploymentGroupName = src.Spec.DeploymentGroupName
	dst.Spec.Description = src.Spec.Description
	dst.Spec.FileExistsBehavior = src.Spec.FileExistsBehavior
	dst.Spec.IgnoreApplicationStopFailures = src.Spec.IgnoreApplicationStopFailures
	if src.Spec.Revision != nil {
		revisionLocationCopy := &RevisionLocation{}
		if src.Spec.Revision.AppSpecContent != nil {
			appSpecContentCopy := &AppSpecContent{}
			appSpecContentCopy.Content = src.Spec.Revision.AppSpecContent.Content
			appSpecContentCopy.SHA256 = src.Spec.Revision.AppSpecContent.SHA256
			revisionLocationCopy.AppSpecContent = appSpecContentCopy
		}

		if src.Spec.Revision.GitHubLocation != nil {
			gitHubLocationCopy := &GitHubLocation{}
			gitHubLocationCopy.CommitID = src.Spec.Revision.GitHubLocation.CommitID
			gitHubLocationCopy.Repository = src.Spec.Revision.GitHubLocation.Repository
			revisionLocationCopy.GitHubLocation = gitHubLocationCopy
		}

		revisionLocationCopy.RevisionType = src.Spec.Revision.RevisionType
		if src.Spec.Revision.S3Location != nil {
			s3LocationCopy := &S3Location{}
			s3LocationCopy.Bucket = src.Spec.Revision.S3Location.Bucket
			s3LocationCopy.BundleType = src.Spec.Revision.S3Location.BundleType
			s3LocationCopy.ETag = src.Spec.Revision.S3Location.ETag
			s3LocationCopy.Key = src.Spec.Revision.S3Location.Key
			s3LocationCopy.Version = src.Spec.Revision.S3Location.Version
			revisionLocationCopy.S3Location = s3LocationCopy
		}

		if src.Spec.Revision.String != nil {
			rawStringCopy := &RawString{}
			rawStringCopy.Content = src.Spec.Revision.String.Content
			rawStringCopy.SHA256 = src.Spec.Revision.String.SHA256
			revisionLocationCopy.String = rawStringCopy
		}

		dst.Spec.Revision = revisionLocationCopy
	}

	if src.Spec.TargetInstances != nil {
		targetInstancesCopy := &TargetInstances{}
		src.Spec.TargetInstances.AutoScalingGroups = targetInstancesCopy.AutoScalingGroups
		if src.Spec.TargetInstances.EC2TagSet != nil {
			ec2TagSetCopy := &EC2TagSet{}
			if src.Spec.TargetInstances.EC2TagSet.EC2TagSetList != nil {
				ec2TagSetListCopy := make([][]*EC2TagFilter, 0, len(src.Spec.TargetInstances.EC2TagSet.EC2TagSetList))
				for i, element := range src.Spec.TargetInstances.EC2TagSet.EC2TagSetList {
					_ = i // non-used value guard.
					elementCopy := make([]*EC2TagFilter, 0, len(element))
					if element != nil {
						ec2TagFilterListCopy := make([]*EC2TagFilter, 0, len(element))
						for i, element := range element {
							_ = i // non-used value guard.
							elementCopy := &EC2TagFilter{}
							if element != nil {
								ec2TagFilterCopy := &EC2TagFilter{}
								ec2TagFilterCopy.Key = element.Key
								ec2TagFilterCopy.Type = element.Type
								ec2TagFilterCopy.Value = element.Value
								elementCopy = ec2TagFilterCopy
							}

							ec2TagFilterListCopy = append(ec2TagFilterListCopy, elementCopy)
						}
						elementCopy = ec2TagFilterListCopy
					}

					ec2TagSetListCopy = append(ec2TagSetListCopy, elementCopy)
				}
				ec2TagSetCopy.EC2TagSetList = ec2TagSetListCopy
			}

			targetInstancesCopy.EC2TagSet = ec2TagSetCopy
		}

		if src.Spec.TargetInstances.TagFilters != nil {
			ec2TagFilterListCopy := make([]*EC2TagFilter, 0, len(src.Spec.TargetInstances.TagFilters))
			for i, element := range src.Spec.TargetInstances.TagFilters {
				_ = i // non-used value guard.
				elementCopy := &EC2TagFilter{}
				if element != nil {
					ec2TagFilterCopy := &EC2TagFilter{}
					ec2TagFilterCopy.Key = element.Key
					ec2TagFilterCopy.Type = element.Type
					ec2TagFilterCopy.Value = element.Value
					elementCopy = ec2TagFilterCopy
				}

				ec2TagFilterListCopy = append(ec2TagFilterListCopy, elementCopy)
			}
			targetInstancesCopy.TagFilters = ec2TagFilterListCopy
		}

		dst.Spec.TargetInstances = targetInstancesCopy
	}

	dst.Spec.UpdateOutdatedInstancesOnly = src.Spec.UpdateOutdatedInstancesOnly
	dst.Status.DeploymentID = src.Status.DeploymentID
	dst.Status.ACKResourceMetadata = src.Status.ACKResourceMetadata
	dst.Status.Conditions = src.Status.Conditions

	dst.ObjectMeta = src.ObjectMeta
	return nil
}