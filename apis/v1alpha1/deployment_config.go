// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DeploymentConfigSpec defines the desired state of DeploymentConfig.
type DeploymentConfigSpec struct {
	// The destination platform type for the deployment (Lambda, Server, or ECS).
	 ComputePlatform *string `json:"computePlatform,omitempty"` 
	// The name of the deployment configuration to create.
	 // +kubebuilder:validation:Required
	DeploymentConfigName *string `json:"deploymentConfigName"`
	// The minimum number of healthy instances that should be available at any time
// during the deployment. There are two parameters expected in the input: type
// and value.
// 
// The type parameter takes either of the following values:
// 
//    * HOST_COUNT: The value parameter represents the minimum number of healthy
//    instances as an absolute value.
// 
//    * FLEET_PERCENT: The value parameter represents the minimum number of
//    healthy instances as a percentage of the total number of instances in
//    the deployment. If you specify FLEET_PERCENT, at the start of the deployment,
//    AWS CodeDeploy converts the percentage to the equivalent number of instances
//    and rounds up fractional instances.
// 
// The value parameter takes an integer.
// 
// For example, to set a minimum of 95% healthy instance, specify a type of
// FLEET_PERCENT and a value of 95.
	 MinimumHealthyHosts *MinimumHealthyHosts `json:"minimumHealthyHosts,omitempty"` 
	// The configuration that specifies how the deployment traffic is routed.
	 TrafficRoutingConfig *TrafficRoutingConfig `json:"trafficRoutingConfig,omitempty"` 
}

// DeploymentConfigStatus defines the observed state of DeploymentConfig
type DeploymentConfigStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// A unique deployment configuration ID.
	DeploymentConfigID *string `json:"deploymentConfigID,omitempty"`
}

// DeploymentConfig is the Schema for the DeploymentConfigs API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type DeploymentConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   DeploymentConfigSpec   `json:"spec,omitempty"`
	Status DeploymentConfigStatus `json:"status,omitempty"`
}

// DeploymentConfigList contains a list of DeploymentConfig
// +kubebuilder:object:root=true
type DeploymentConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []DeploymentConfig `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DeploymentConfig{}, &DeploymentConfigList{})
}
