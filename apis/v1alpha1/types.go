// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	"github.com/aws/aws-sdk-go/aws"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = ackv1alpha1.AWSAccountID("")
)


// Information about an alarm.
type Alarm struct {
	Name *string `json:"name,omitempty"`
}


// Information about alarms associated with the deployment group.
type AlarmConfiguration struct {
	Alarms []*Alarm `json:"alarms,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	IgnorePollAlarmFailure *bool `json:"ignorePollAlarmFailure,omitempty"`
}


// A revision for an AWS Lambda or Amazon ECS deployment that is a YAML-formatted
// or JSON-formatted string. For AWS Lambda and Amazon ECS deployments, the
// revision is the same as the AppSpec file. This method replaces the deprecated
// RawString data type.
type AppSpecContent struct {
	Content *string `json:"content,omitempty"`
	SHA256 *string `json:"sha256,omitempty"`
}


// Information about an application.
type ApplicationInfo struct {
	ApplicationID *string `json:"applicationID,omitempty"`
	ApplicationName *string `json:"applicationName,omitempty"`
	ComputePlatform *string `json:"computePlatform,omitempty"`
	CreateTime *metav1.Time `json:"createTime,omitempty"`
	GitHubAccountName *string `json:"gitHubAccountName,omitempty"`
	LinkedToGitHub *bool `json:"linkedToGitHub,omitempty"`
}


// Information about a configuration for automatically rolling back to a previous
// version of an application revision when a deployment is not completed successfully.
type AutoRollbackConfiguration struct {
	Enabled *bool `json:"enabled,omitempty"`
	Events []*string `json:"events,omitempty"`
}


// Information about an Auto Scaling group.
type AutoScalingGroup struct {
	Hook *string `json:"hook,omitempty"`
	Name *string `json:"name,omitempty"`
}


// Information about blue/green deployment options for a deployment group.
type BlueGreenDeploymentConfiguration struct {
	// Information about how traffic is rerouted to instances in a replacement environment
// in a blue/green deployment.
	DeploymentReadyOption *DeploymentReadyOption `json:"deploymentReadyOption,omitempty"`
	// Information about the instances that belong to the replacement environment
// in a blue/green deployment.
	GreenFleetProvisioningOption *GreenFleetProvisioningOption `json:"greenFleetProvisioningOption,omitempty"`
	// Information about whether instances in the original environment are terminated
// when a blue/green deployment is successful. BlueInstanceTerminationOption
// does not apply to Lambda deployments.
	TerminateBlueInstancesOnDeploymentSuccess *BlueInstanceTerminationOption `json:"terminateBlueInstancesOnDeploymentSuccess,omitempty"`
}


// Information about whether instances in the original environment are terminated
// when a blue/green deployment is successful. BlueInstanceTerminationOption
// does not apply to Lambda deployments.
type BlueInstanceTerminationOption struct {
	Action *string `json:"action,omitempty"`
	TerminationWaitTimeInMinutes *int64 `json:"terminationWaitTimeInMinutes,omitempty"`
}


// Information about the target to be updated by an AWS CloudFormation blue/green
// deployment. This target type is used for all deployments initiated by a CloudFormation
// stack update.
type CloudFormationTarget struct {
	DeploymentID *string `json:"deploymentID,omitempty"`
}


// Information about a deployment configuration.
type DeploymentConfigInfo struct {
	ComputePlatform *string `json:"computePlatform,omitempty"`
	CreateTime *metav1.Time `json:"createTime,omitempty"`
	DeploymentConfigID *string `json:"deploymentConfigID,omitempty"`
	DeploymentConfigName *string `json:"deploymentConfigName,omitempty"`
	// Information about minimum healthy instance.
	MinimumHealthyHosts *MinimumHealthyHosts `json:"minimumHealthyHosts,omitempty"`
	// The configuration that specifies how traffic is shifted from one version
// of a Lambda function to another version during an AWS Lambda deployment,
// or from one Amazon ECS task set to another during an Amazon ECS deployment.
	TrafficRoutingConfig *TrafficRoutingConfig `json:"trafficRoutingConfig,omitempty"`
}


// Information about a deployment group.
type DeploymentGroupInfo struct {
	// Information about alarms associated with the deployment group.
	AlarmConfiguration *AlarmConfiguration `json:"alarmConfiguration,omitempty"`
	ApplicationName *string `json:"applicationName,omitempty"`
	// Information about a configuration for automatically rolling back to a previous
// version of an application revision when a deployment is not completed successfully.
	AutoRollbackConfiguration *AutoRollbackConfiguration `json:"autoRollbackConfiguration,omitempty"`
	AutoScalingGroups []*AutoScalingGroup `json:"autoScalingGroups,omitempty"`
	// Information about blue/green deployment options for a deployment group.
	BlueGreenDeploymentConfiguration *BlueGreenDeploymentConfiguration `json:"blueGreenDeploymentConfiguration,omitempty"`
	ComputePlatform *string `json:"computePlatform,omitempty"`
	DeploymentConfigName *string `json:"deploymentConfigName,omitempty"`
	DeploymentGroupID *string `json:"deploymentGroupID,omitempty"`
	DeploymentGroupName *string `json:"deploymentGroupName,omitempty"`
	// Information about the type of deployment, either in-place or blue/green,
// you want to run and whether to route deployment traffic behind a load balancer.
	DeploymentStyle *DeploymentStyle `json:"deploymentStyle,omitempty"`
	EC2TagFilters []*EC2TagFilter `json:"ec2TagFilters,omitempty"`
	// Information about groups of EC2 instance tags.
	EC2TagSet *EC2TagSet `json:"ec2TagSet,omitempty"`
	EcsServices []*ECSService `json:"ecsServices,omitempty"`
	// Information about the most recent attempted or successful deployment to a
// deployment group.
	LastAttemptedDeployment *LastDeploymentInfo `json:"lastAttemptedDeployment,omitempty"`
	// Information about the most recent attempted or successful deployment to a
// deployment group.
	LastSuccessfulDeployment *LastDeploymentInfo `json:"lastSuccessfulDeployment,omitempty"`
	// Information about the Elastic Load Balancing load balancer or target group
// used in a deployment.
	LoadBalancerInfo *LoadBalancerInfo `json:"loadBalancerInfo,omitempty"`
	OnPremisesInstanceTagFilters []*TagFilter `json:"onPremisesInstanceTagFilters,omitempty"`
	// Information about groups of on-premises instance tags.
	OnPremisesTagSet *OnPremisesTagSet `json:"onPremisesTagSet,omitempty"`
	OutdatedInstancesStrategy *string `json:"outdatedInstancesStrategy,omitempty"`
	ServiceRoleARN *string `json:"serviceRoleARN,omitempty"`
	// Information about the location of an application revision.
	TargetRevision *RevisionLocation `json:"targetRevision,omitempty"`
	TriggerConfigurations []*TriggerConfig `json:"triggerConfigurations,omitempty"`
}


// Information about a deployment.
type DeploymentInfo struct {
	AdditionalDeploymentStatusInfo *string `json:"additionalDeploymentStatusInfo,omitempty"`
	ApplicationName *string `json:"applicationName,omitempty"`
	// Information about a configuration for automatically rolling back to a previous
// version of an application revision when a deployment is not completed successfully.
	AutoRollbackConfiguration *AutoRollbackConfiguration `json:"autoRollbackConfiguration,omitempty"`
	// Information about blue/green deployment options for a deployment group.
	BlueGreenDeploymentConfiguration *BlueGreenDeploymentConfiguration `json:"blueGreenDeploymentConfiguration,omitempty"`
	CompleteTime *metav1.Time `json:"completeTime,omitempty"`
	ComputePlatform *string `json:"computePlatform,omitempty"`
	CreateTime *metav1.Time `json:"createTime,omitempty"`
	Creator *string `json:"creator,omitempty"`
	DeploymentConfigName *string `json:"deploymentConfigName,omitempty"`
	DeploymentGroupName *string `json:"deploymentGroupName,omitempty"`
	DeploymentID *string `json:"deploymentID,omitempty"`
	// Information about the deployment status of the instances in the deployment.
	DeploymentOverview *DeploymentOverview `json:"deploymentOverview,omitempty"`
	DeploymentStatusMessages []*string `json:"deploymentStatusMessages,omitempty"`
	// Information about the type of deployment, either in-place or blue/green,
// you want to run and whether to route deployment traffic behind a load balancer.
	DeploymentStyle *DeploymentStyle `json:"deploymentStyle,omitempty"`
	Description *string `json:"description,omitempty"`
	// Information about a deployment error.
	ErrorInformation *ErrorInformation `json:"errorInformation,omitempty"`
	ExternalID *string `json:"externalID,omitempty"`
	FileExistsBehavior *string `json:"fileExistsBehavior,omitempty"`
	IgnoreApplicationStopFailures *bool `json:"ignoreApplicationStopFailures,omitempty"`
	InstanceTerminationWaitTimeStarted *bool `json:"instanceTerminationWaitTimeStarted,omitempty"`
	// Information about the Elastic Load Balancing load balancer or target group
// used in a deployment.
	LoadBalancerInfo *LoadBalancerInfo `json:"loadBalancerInfo,omitempty"`
	// Information about the location of an application revision.
	PreviousRevision *RevisionLocation `json:"previousRevision,omitempty"`
	// Information about deployments related to the specified deployment.
	RelatedDeployments *RelatedDeployments `json:"relatedDeployments,omitempty"`
	// Information about the location of an application revision.
	Revision *RevisionLocation `json:"revision,omitempty"`
	// Information about a deployment rollback.
	RollbackInfo *RollbackInfo `json:"rollbackInfo,omitempty"`
	StartTime *metav1.Time `json:"startTime,omitempty"`
	Status *string `json:"status,omitempty"`
	// Information about the instances to be used in the replacement environment
// in a blue/green deployment.
	TargetInstances *TargetInstances `json:"targetInstances,omitempty"`
	UpdateOutdatedInstancesOnly *bool `json:"updateOutdatedInstancesOnly,omitempty"`
}


// Information about the deployment status of the instances in the deployment.
type DeploymentOverview struct {
	Failed *int64 `json:"failed,omitempty"`
	InProgress *int64 `json:"inProgress,omitempty"`
	Pending *int64 `json:"pending,omitempty"`
	Ready *int64 `json:"ready,omitempty"`
	Skipped *int64 `json:"skipped,omitempty"`
	Succeeded *int64 `json:"succeeded,omitempty"`
}


// Information about how traffic is rerouted to instances in a replacement environment
// in a blue/green deployment.
type DeploymentReadyOption struct {
	ActionOnTimeout *string `json:"actionOnTimeout,omitempty"`
	WaitTimeInMinutes *int64 `json:"waitTimeInMinutes,omitempty"`
}


// Information about the type of deployment, either in-place or blue/green,
// you want to run and whether to route deployment traffic behind a load balancer.
type DeploymentStyle struct {
	DeploymentOption *string `json:"deploymentOption,omitempty"`
	DeploymentType *string `json:"deploymentType,omitempty"`
}


// Information about an EC2 tag filter.
type EC2TagFilter struct {
	Key *string `json:"key,omitempty"`
	Type *string `json:"type_,omitempty"`
	Value *string `json:"value,omitempty"`
}


// Information about groups of EC2 instance tags.
type EC2TagSet struct {
	EC2TagSetList [][]*EC2TagFilter `json:"ec2TagSetList,omitempty"`
}


// Contains the service and cluster names used to identify an Amazon ECS deployment's
// target.
type ECSService struct {
	ClusterName *string `json:"clusterName,omitempty"`
	ServiceName *string `json:"serviceName,omitempty"`
}


// Information about the target of an Amazon ECS deployment.
type ECSTarget struct {
	DeploymentID *string `json:"deploymentID,omitempty"`
}


// Information about a set of Amazon ECS tasks in an AWS CodeDeploy deployment.
// An Amazon ECS task set includes details such as the desired number of tasks,
// how many tasks are running, and whether the task set serves production traffic.
// An AWS CodeDeploy application that uses the Amazon ECS compute platform deploys
// a containerized application in an Amazon ECS service as a task set.
type ECSTaskSet struct {
	// Information about a target group in Elastic Load Balancing to use in a deployment.
// Instances are registered as targets in a target group, and traffic is routed
// to the target group.
	TargetGroup *TargetGroupInfo `json:"targetGroup,omitempty"`
}


// Information about a load balancer in Elastic Load Balancing to use in a deployment.
// Instances are registered directly with a load balancer, and traffic is routed
// to the load balancer.
type ELBInfo struct {
	Name *string `json:"name,omitempty"`
}


// Information about a deployment error.
type ErrorInformation struct {
	Code *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}


// Information about an application revision.
type GenericRevisionInfo struct {
	DeploymentGroups []*string `json:"deploymentGroups,omitempty"`
	Description *string `json:"description,omitempty"`
	FirstUsedTime *metav1.Time `json:"firstUsedTime,omitempty"`
	LastUsedTime *metav1.Time `json:"lastUsedTime,omitempty"`
	RegisterTime *metav1.Time `json:"registerTime,omitempty"`
}


// Information about the location of application artifacts stored in GitHub.
type GitHubLocation struct {
	CommitID *string `json:"commitID,omitempty"`
	Repository *string `json:"repository,omitempty"`
}


// Information about the instances that belong to the replacement environment
// in a blue/green deployment.
type GreenFleetProvisioningOption struct {
	Action *string `json:"action,omitempty"`
}


// Information about an on-premises instance.
type InstanceInfo struct {
	DeregisterTime *metav1.Time `json:"deregisterTime,omitempty"`
	RegisterTime *metav1.Time `json:"registerTime,omitempty"`
	Tags []*Tag `json:"tags,omitempty"`
}


// Information about an instance in a deployment.
type InstanceSummary struct {
	DeploymentID *string `json:"deploymentID,omitempty"`
	LastUpdatedAt *metav1.Time `json:"lastUpdatedAt,omitempty"`
}


// A target Amazon EC2 or on-premises instance during a deployment that uses
// the EC2/On-premises compute platform.
type InstanceTarget struct {
	DeploymentID *string `json:"deploymentID,omitempty"`
}


// Information about the target AWS Lambda function during an AWS Lambda deployment.
type LambdaTarget struct {
	DeploymentID *string `json:"deploymentID,omitempty"`
}


// Information about the most recent attempted or successful deployment to a
// deployment group.
type LastDeploymentInfo struct {
	CreateTime *metav1.Time `json:"createTime,omitempty"`
	DeploymentID *string `json:"deploymentID,omitempty"`
	EndTime *metav1.Time `json:"endTime,omitempty"`
	Status *string `json:"status,omitempty"`
}


// Information about a deployment lifecycle event.
type LifecycleEvent struct {
	EndTime *metav1.Time `json:"endTime,omitempty"`
	StartTime *metav1.Time `json:"startTime,omitempty"`
}


// Information about the Elastic Load Balancing load balancer or target group
// used in a deployment.
type LoadBalancerInfo struct {
	ElbInfoList []*ELBInfo `json:"elbInfoList,omitempty"`
	TargetGroupInfoList []*TargetGroupInfo `json:"targetGroupInfoList,omitempty"`
	TargetGroupPairInfoList []*TargetGroupPairInfo `json:"targetGroupPairInfoList,omitempty"`
}


// Information about minimum healthy instance.
type MinimumHealthyHosts struct {
	Type *string `json:"type_,omitempty"`
	Value *int64 `json:"value,omitempty"`
}


// Information about groups of on-premises instance tags.
type OnPremisesTagSet struct {
	OnPremisesTagSetList [][]*TagFilter `json:"onPremisesTagSetList,omitempty"`
}


// A revision for an AWS Lambda deployment that is a YAML-formatted or JSON-formatted
// string. For AWS Lambda deployments, the revision is the same as the AppSpec
// file.
type RawString struct {
	Content *string `json:"content,omitempty"`
	SHA256 *string `json:"sha256,omitempty"`
}


// Information about deployments related to the specified deployment.
type RelatedDeployments struct {
	AutoUpdateOutdatedInstancesDeploymentIDs []*string `json:"autoUpdateOutdatedInstancesDeploymentIDs,omitempty"`
	AutoUpdateOutdatedInstancesRootDeploymentID *string `json:"autoUpdateOutdatedInstancesRootDeploymentID,omitempty"`
}


// Information about an application revision.
type RevisionInfo struct {
	// Information about the location of an application revision.
	RevisionLocation *RevisionLocation `json:"revisionLocation,omitempty"`
}


// Information about the location of an application revision.
type RevisionLocation struct {
	// A revision for an AWS Lambda or Amazon ECS deployment that is a YAML-formatted
// or JSON-formatted string. For AWS Lambda and Amazon ECS deployments, the
// revision is the same as the AppSpec file. This method replaces the deprecated
// RawString data type.
	AppSpecContent *AppSpecContent `json:"appSpecContent,omitempty"`
	// Information about the location of application artifacts stored in GitHub.
	GitHubLocation *GitHubLocation `json:"gitHubLocation,omitempty"`
	RevisionType *string `json:"revisionType,omitempty"`
	// Information about the location of application artifacts stored in Amazon
// S3.
	S3Location *S3Location `json:"s3Location,omitempty"`
	// A revision for an AWS Lambda deployment that is a YAML-formatted or JSON-formatted
// string. For AWS Lambda deployments, the revision is the same as the AppSpec
// file.
	String *RawString `json:"string,omitempty"`
}


// Information about a deployment rollback.
type RollbackInfo struct {
	RollbackDeploymentID *string `json:"rollbackDeploymentID,omitempty"`
	RollbackMessage *string `json:"rollbackMessage,omitempty"`
	RollbackTriggeringDeploymentID *string `json:"rollbackTriggeringDeploymentID,omitempty"`
}


// Information about the location of application artifacts stored in Amazon
// S3.
type S3Location struct {
	Bucket *string `json:"bucket,omitempty"`
	BundleType *string `json:"bundleType,omitempty"`
	ETag *string `json:"eTag,omitempty"`
	Key *string `json:"key,omitempty"`
	Version *string `json:"version,omitempty"`
}


// Information about a tag.
type Tag struct {
	Key *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}


// Information about an on-premises instance tag filter.
type TagFilter struct {
	Key *string `json:"key,omitempty"`
	Type *string `json:"type_,omitempty"`
	Value *string `json:"value,omitempty"`
}


// Information about a target group in Elastic Load Balancing to use in a deployment.
// Instances are registered as targets in a target group, and traffic is routed
// to the target group.
type TargetGroupInfo struct {
	Name *string `json:"name,omitempty"`
}


// Information about two target groups and how traffic is routed during an Amazon
// ECS deployment. An optional test traffic route can be specified.
type TargetGroupPairInfo struct {
	// Information about a listener. The listener contains the path used to route
// traffic that is received from the load balancer to a target group.
	ProdTrafficRoute *TrafficRoute `json:"prodTrafficRoute,omitempty"`
	TargetGroups []*TargetGroupInfo `json:"targetGroups,omitempty"`
	// Information about a listener. The listener contains the path used to route
// traffic that is received from the load balancer to a target group.
	TestTrafficRoute *TrafficRoute `json:"testTrafficRoute,omitempty"`
}


// Information about the instances to be used in the replacement environment
// in a blue/green deployment.
type TargetInstances struct {
	AutoScalingGroups []*string `json:"autoScalingGroups,omitempty"`
	// Information about groups of EC2 instance tags.
	EC2TagSet *EC2TagSet `json:"ec2TagSet,omitempty"`
	TagFilters []*EC2TagFilter `json:"tagFilters,omitempty"`
}


// A configuration that shifts traffic from one version of a Lambda function
// or ECS task set to another in two increments. The original and target Lambda
// function versions or ECS task sets are specified in the deployment's AppSpec
// file.
type TimeBasedCanary struct {
	CanaryInterval *int64 `json:"canaryInterval,omitempty"`
	CanaryPercentage *int64 `json:"canaryPercentage,omitempty"`
}


// A configuration that shifts traffic from one version of a Lambda function
// or ECS task set to another in equal increments, with an equal number of minutes
// between each increment. The original and target Lambda function versions
// or ECS task sets are specified in the deployment's AppSpec file.
type TimeBasedLinear struct {
	LinearInterval *int64 `json:"linearInterval,omitempty"`
	LinearPercentage *int64 `json:"linearPercentage,omitempty"`
}


// Information about a time range.
type TimeRange struct {
	End *metav1.Time `json:"end,omitempty"`
	Start *metav1.Time `json:"start,omitempty"`
}


// Information about a listener. The listener contains the path used to route
// traffic that is received from the load balancer to a target group.
type TrafficRoute struct {
	ListenerARNs []*string `json:"listenerARNs,omitempty"`
}


// The configuration that specifies how traffic is shifted from one version
// of a Lambda function to another version during an AWS Lambda deployment,
// or from one Amazon ECS task set to another during an Amazon ECS deployment.
type TrafficRoutingConfig struct {
	// A configuration that shifts traffic from one version of a Lambda function
// or ECS task set to another in two increments. The original and target Lambda
// function versions or ECS task sets are specified in the deployment's AppSpec
// file.
	TimeBasedCanary *TimeBasedCanary `json:"timeBasedCanary,omitempty"`
	// A configuration that shifts traffic from one version of a Lambda function
// or ECS task set to another in equal increments, with an equal number of minutes
// between each increment. The original and target Lambda function versions
// or ECS task sets are specified in the deployment's AppSpec file.
	TimeBasedLinear *TimeBasedLinear `json:"timeBasedLinear,omitempty"`
	Type *string `json:"type_,omitempty"`
}


// Information about notification triggers for the deployment group.
type TriggerConfig struct {
	TriggerEvents []*string `json:"triggerEvents,omitempty"`
	TriggerName *string `json:"triggerName,omitempty"`
	TriggerTargetARN *string `json:"triggerTargetARN,omitempty"`
}