// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.


package v1alpha1

import (
    "encoding/json"
    "fmt"

    ctrlrtconversion "sigs.k8s.io/controller-runtime/pkg/conversion"
    ctrlrt "sigs.k8s.io/controller-runtime"
    ackrtwh "github.com/aws-controllers-k8s/runtime/pkg/webhook"

    v1alpha2 "github.com/aws-controllers-k8s/codedeploy-controller/apis/v1alpha2"
)

var (
    _ = fmt.Printf
    _ = json.Marshal
)

func init() {
    webhook := ackrtwh.New(
        "conversion",
        "DeploymentGroup",
        "v1alpha1",
		func(mgr ctrlrt.Manager) error {
			return ctrlrt.NewWebhookManagedBy(mgr).
				For(&DeploymentGroup{}).
				Complete()
		},
    )
    if err := ackrtwh.RegisterWebhook(webhook); err != nil {
        msg := fmt.Sprintf("cannot register webhook: %v", err)
        panic(msg)
    }
}

// Assert convertible interface implementation DeploymentGroup
var _ ctrlrtconversion.Convertible = &DeploymentGroup{}

// ConvertTo converts this DeploymentGroup to the Hub version (v1alpha2).
func (src *DeploymentGroup) ConvertTo(dstRaw ctrlrtconversion.Hub) error {
	dst := dstRaw.(*v1alpha2.DeploymentGroup)
	if src.Spec.AlarmConfiguration != nil {
		alarmConfigurationCopy := &v1alpha2.AlarmConfiguration{}
		if src.Spec.AlarmConfiguration.Alarms != nil {
			alarmListCopy := make([]*v1alpha2.Alarm, 0, len(src.Spec.AlarmConfiguration.Alarms))
			for i, element := range src.Spec.AlarmConfiguration.Alarms {
				_ = i // non-used value guard.
				elementCopy := &v1alpha2.Alarm{}
				if element != nil {
					alarmCopy := &v1alpha2.Alarm{}
					alarmCopy.Name = element.Name
					elementCopy = alarmCopy
				}

				alarmListCopy = append(alarmListCopy, elementCopy)
			}
			alarmConfigurationCopy.Alarms = alarmListCopy
		}

		alarmConfigurationCopy.Enabled = src.Spec.AlarmConfiguration.Enabled
		alarmConfigurationCopy.IgnorePollAlarmFailure = src.Spec.AlarmConfiguration.IgnorePollAlarmFailure
		dst.Spec.AlarmConfiguration = alarmConfigurationCopy
	}

	dst.Spec.ApplicationName = src.Spec.ApplicationName
	if src.Spec.AutoRollbackConfiguration != nil {
		autoRollbackConfigurationCopy := &v1alpha2.AutoRollbackConfiguration{}
		autoRollbackConfigurationCopy.Enabled = src.Spec.AutoRollbackConfiguration.Enabled
		src.Spec.AutoRollbackConfiguration.Events = autoRollbackConfigurationCopy.Events
		dst.Spec.AutoRollbackConfiguration = autoRollbackConfigurationCopy
	}

	src.Spec.AutoScalingGroups = dst.Spec.AutoScalingGroups
	if src.Spec.BlueGreenDeploymentConfiguration != nil {
		blueGreenDeploymentConfigurationCopy := &v1alpha2.BlueGreenDeploymentConfiguration{}
		if src.Spec.BlueGreenDeploymentConfiguration.DeploymentReadyOption != nil {
			deploymentReadyOptionCopy := &v1alpha2.DeploymentReadyOption{}
			deploymentReadyOptionCopy.ActionOnTimeout = src.Spec.BlueGreenDeploymentConfiguration.DeploymentReadyOption.ActionOnTimeout
			deploymentReadyOptionCopy.WaitTimeInMinutes = src.Spec.BlueGreenDeploymentConfiguration.DeploymentReadyOption.WaitTimeInMinutes
			blueGreenDeploymentConfigurationCopy.DeploymentReadyOption = deploymentReadyOptionCopy
		}

		if src.Spec.BlueGreenDeploymentConfiguration.GreenFleetProvisioningOption != nil {
			greenFleetProvisioningOptionCopy := &v1alpha2.GreenFleetProvisioningOption{}
			greenFleetProvisioningOptionCopy.Action = src.Spec.BlueGreenDeploymentConfiguration.GreenFleetProvisioningOption.Action
			blueGreenDeploymentConfigurationCopy.GreenFleetProvisioningOption = greenFleetProvisioningOptionCopy
		}

		if src.Spec.BlueGreenDeploymentConfiguration.TerminateBlueInstancesOnDeploymentSuccess != nil {
			blueInstanceTerminationOptionCopy := &v1alpha2.BlueInstanceTerminationOption{}
			blueInstanceTerminationOptionCopy.Action = src.Spec.BlueGreenDeploymentConfiguration.TerminateBlueInstancesOnDeploymentSuccess.Action
			blueInstanceTerminationOptionCopy.TerminationWaitTimeInMinutes = src.Spec.BlueGreenDeploymentConfiguration.TerminateBlueInstancesOnDeploymentSuccess.TerminationWaitTimeInMinutes
			blueGreenDeploymentConfigurationCopy.TerminateBlueInstancesOnDeploymentSuccess = blueInstanceTerminationOptionCopy
		}

		dst.Spec.BlueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationCopy
	}

	dst.Spec.DeploymentConfigName = src.Spec.DeploymentConfigName
	dst.Spec.DeploymentGroupName = src.Spec.DeploymentGroupName
	if src.Spec.DeploymentStyle != nil {
		deploymentStyleCopy := &v1alpha2.DeploymentStyle{}
		deploymentStyleCopy.DeploymentOption = src.Spec.DeploymentStyle.DeploymentOption
		deploymentStyleCopy.DeploymentType = src.Spec.DeploymentStyle.DeploymentType
		dst.Spec.DeploymentStyle = deploymentStyleCopy
	}

	if src.Spec.EC2TagFilters != nil {
		ec2TagFilterListCopy := make([]*v1alpha2.EC2TagFilter, 0, len(src.Spec.EC2TagFilters))
		for i, element := range src.Spec.EC2TagFilters {
			_ = i // non-used value guard.
			elementCopy := &v1alpha2.EC2TagFilter{}
			if element != nil {
				ec2TagFilterCopy := &v1alpha2.EC2TagFilter{}
				ec2TagFilterCopy.Key = element.Key
				ec2TagFilterCopy.Type = element.Type
				ec2TagFilterCopy.Value = element.Value
				elementCopy = ec2TagFilterCopy
			}

			ec2TagFilterListCopy = append(ec2TagFilterListCopy, elementCopy)
		}
		dst.Spec.EC2TagFilters = ec2TagFilterListCopy
	}

	if src.Spec.EC2TagSet != nil {
		ec2TagSetCopy := &v1alpha2.EC2TagSet{}
		if src.Spec.EC2TagSet.EC2TagSetList != nil {
			ec2TagSetListCopy := make([][]*v1alpha2.EC2TagFilter, 0, len(src.Spec.EC2TagSet.EC2TagSetList))
			for i, element := range src.Spec.EC2TagSet.EC2TagSetList {
				_ = i // non-used value guard.
				elementCopy := make([]*v1alpha2.EC2TagFilter, 0, len(element))
				if element != nil {
					ec2TagFilterListCopy := make([]*v1alpha2.EC2TagFilter, 0, len(element))
					for i, element := range element {
						_ = i // non-used value guard.
						elementCopy := &v1alpha2.EC2TagFilter{}
						if element != nil {
							ec2TagFilterCopy := &v1alpha2.EC2TagFilter{}
							ec2TagFilterCopy.Key = element.Key
							ec2TagFilterCopy.Type = element.Type
							ec2TagFilterCopy.Value = element.Value
							elementCopy = ec2TagFilterCopy
						}

						ec2TagFilterListCopy = append(ec2TagFilterListCopy, elementCopy)
					}
					elementCopy = ec2TagFilterListCopy
				}

				ec2TagSetListCopy = append(ec2TagSetListCopy, elementCopy)
			}
			ec2TagSetCopy.EC2TagSetList = ec2TagSetListCopy
		}

		dst.Spec.EC2TagSet = ec2TagSetCopy
	}

	if src.Spec.EcsServices != nil {
		eCSServiceListCopy := make([]*v1alpha2.ECSService, 0, len(src.Spec.EcsServices))
		for i, element := range src.Spec.EcsServices {
			_ = i // non-used value guard.
			elementCopy := &v1alpha2.ECSService{}
			if element != nil {
				eCSServiceCopy := &v1alpha2.ECSService{}
				eCSServiceCopy.ClusterName = element.ClusterName
				eCSServiceCopy.ServiceName = element.ServiceName
				elementCopy = eCSServiceCopy
			}

			eCSServiceListCopy = append(eCSServiceListCopy, elementCopy)
		}
		dst.Spec.EcsServices = eCSServiceListCopy
	}

	if src.Spec.LoadBalancerInfo != nil {
		loadBalancerInfoCopy := &v1alpha2.LoadBalancerInfo{}
		if src.Spec.LoadBalancerInfo.ElbInfoList != nil {
			eLBInfoListCopy := make([]*v1alpha2.ELBInfo, 0, len(src.Spec.LoadBalancerInfo.ElbInfoList))
			for i, element := range src.Spec.LoadBalancerInfo.ElbInfoList {
				_ = i // non-used value guard.
				elementCopy := &v1alpha2.ELBInfo{}
				if element != nil {
					eLBInfoCopy := &v1alpha2.ELBInfo{}
					eLBInfoCopy.Name = element.Name
					elementCopy = eLBInfoCopy
				}

				eLBInfoListCopy = append(eLBInfoListCopy, elementCopy)
			}
			loadBalancerInfoCopy.ElbInfoList = eLBInfoListCopy
		}

		if src.Spec.LoadBalancerInfo.TargetGroupInfoList != nil {
			targetGroupInfoListCopy := make([]*v1alpha2.TargetGroupInfo, 0, len(src.Spec.LoadBalancerInfo.TargetGroupInfoList))
			for i, element := range src.Spec.LoadBalancerInfo.TargetGroupInfoList {
				_ = i // non-used value guard.
				elementCopy := &v1alpha2.TargetGroupInfo{}
				if element != nil {
					targetGroupInfoCopy := &v1alpha2.TargetGroupInfo{}
					targetGroupInfoCopy.Name = element.Name
					elementCopy = targetGroupInfoCopy
				}

				targetGroupInfoListCopy = append(targetGroupInfoListCopy, elementCopy)
			}
			loadBalancerInfoCopy.TargetGroupInfoList = targetGroupInfoListCopy
		}

		if src.Spec.LoadBalancerInfo.TargetGroupPairInfoList != nil {
			targetGroupPairInfoListCopy := make([]*v1alpha2.TargetGroupPairInfo, 0, len(src.Spec.LoadBalancerInfo.TargetGroupPairInfoList))
			for i, element := range src.Spec.LoadBalancerInfo.TargetGroupPairInfoList {
				_ = i // non-used value guard.
				elementCopy := &v1alpha2.TargetGroupPairInfo{}
				if element != nil {
					targetGroupPairInfoCopy := &v1alpha2.TargetGroupPairInfo{}
					if element.ProdTrafficRoute != nil {
						trafficRouteCopy := &v1alpha2.TrafficRoute{}
						element.ProdTrafficRoute.ListenerARNs = trafficRouteCopy.ListenerARNs
						targetGroupPairInfoCopy.ProdTrafficRoute = trafficRouteCopy
					}

					if element.TargetGroups != nil {
						targetGroupInfoListCopy := make([]*v1alpha2.TargetGroupInfo, 0, len(element.TargetGroups))
						for i, element := range element.TargetGroups {
							_ = i // non-used value guard.
							elementCopy := &v1alpha2.TargetGroupInfo{}
							if element != nil {
								targetGroupInfoCopy := &v1alpha2.TargetGroupInfo{}
								targetGroupInfoCopy.Name = element.Name
								elementCopy = targetGroupInfoCopy
							}

							targetGroupInfoListCopy = append(targetGroupInfoListCopy, elementCopy)
						}
						targetGroupPairInfoCopy.TargetGroups = targetGroupInfoListCopy
					}

					if element.TestTrafficRoute != nil {
						trafficRouteCopy := &v1alpha2.TrafficRoute{}
						element.TestTrafficRoute.ListenerARNs = trafficRouteCopy.ListenerARNs
						targetGroupPairInfoCopy.TestTrafficRoute = trafficRouteCopy
					}

					elementCopy = targetGroupPairInfoCopy
				}

				targetGroupPairInfoListCopy = append(targetGroupPairInfoListCopy, elementCopy)
			}
			loadBalancerInfoCopy.TargetGroupPairInfoList = targetGroupPairInfoListCopy
		}

		dst.Spec.LoadBalancerInfo = loadBalancerInfoCopy
	}

	if src.Spec.OnPremisesInstanceTagFilters != nil {
		tagFilterListCopy := make([]*v1alpha2.TagFilter, 0, len(src.Spec.OnPremisesInstanceTagFilters))
		for i, element := range src.Spec.OnPremisesInstanceTagFilters {
			_ = i // non-used value guard.
			elementCopy := &v1alpha2.TagFilter{}
			if element != nil {
				tagFilterCopy := &v1alpha2.TagFilter{}
				tagFilterCopy.Key = element.Key
				tagFilterCopy.Type = element.Type
				tagFilterCopy.Value = element.Value
				elementCopy = tagFilterCopy
			}

			tagFilterListCopy = append(tagFilterListCopy, elementCopy)
		}
		dst.Spec.OnPremisesInstanceTagFilters = tagFilterListCopy
	}

	if src.Spec.OnPremisesTagSet != nil {
		onPremisesTagSetCopy := &v1alpha2.OnPremisesTagSet{}
		if src.Spec.OnPremisesTagSet.OnPremisesTagSetList != nil {
			onPremisesTagSetListCopy := make([][]*v1alpha2.TagFilter, 0, len(src.Spec.OnPremisesTagSet.OnPremisesTagSetList))
			for i, element := range src.Spec.OnPremisesTagSet.OnPremisesTagSetList {
				_ = i // non-used value guard.
				elementCopy := make([]*v1alpha2.TagFilter, 0, len(element))
				if element != nil {
					tagFilterListCopy := make([]*v1alpha2.TagFilter, 0, len(element))
					for i, element := range element {
						_ = i // non-used value guard.
						elementCopy := &v1alpha2.TagFilter{}
						if element != nil {
							tagFilterCopy := &v1alpha2.TagFilter{}
							tagFilterCopy.Key = element.Key
							tagFilterCopy.Type = element.Type
							tagFilterCopy.Value = element.Value
							elementCopy = tagFilterCopy
						}

						tagFilterListCopy = append(tagFilterListCopy, elementCopy)
					}
					elementCopy = tagFilterListCopy
				}

				onPremisesTagSetListCopy = append(onPremisesTagSetListCopy, elementCopy)
			}
			onPremisesTagSetCopy.OnPremisesTagSetList = onPremisesTagSetListCopy
		}

		dst.Spec.OnPremisesTagSet = onPremisesTagSetCopy
	}

	dst.Spec.OutdatedInstancesStrategy = src.Spec.OutdatedInstancesStrategy
	dst.Spec.ServiceRoleARN = src.Spec.ServiceRoleARN
	if src.Spec.Tags != nil {
		tagListCopy := make([]*v1alpha2.Tag, 0, len(src.Spec.Tags))
		for i, element := range src.Spec.Tags {
			_ = i // non-used value guard.
			elementCopy := &v1alpha2.Tag{}
			if element != nil {
				tagCopy := &v1alpha2.Tag{}
				tagCopy.Key = element.Key
				tagCopy.Value = element.Value
				elementCopy = tagCopy
			}

			tagListCopy = append(tagListCopy, elementCopy)
		}
		dst.Spec.Tags = tagListCopy
	}

	if src.Spec.TriggerConfigurations != nil {
		triggerConfigListCopy := make([]*v1alpha2.TriggerConfig, 0, len(src.Spec.TriggerConfigurations))
		for i, element := range src.Spec.TriggerConfigurations {
			_ = i // non-used value guard.
			elementCopy := &v1alpha2.TriggerConfig{}
			if element != nil {
				triggerConfigCopy := &v1alpha2.TriggerConfig{}
				element.TriggerEvents = triggerConfigCopy.TriggerEvents
				triggerConfigCopy.TriggerName = element.TriggerName
				triggerConfigCopy.TriggerTargetARN = element.TriggerTargetARN
				elementCopy = triggerConfigCopy
			}

			triggerConfigListCopy = append(triggerConfigListCopy, elementCopy)
		}
		dst.Spec.TriggerConfigurations = triggerConfigListCopy
	}

	dst.Status.DeploymentGroupID = src.Status.DeploymentGroupID
	dst.Status.ACKResourceMetadata = src.Status.ACKResourceMetadata
	dst.Status.Conditions = src.Status.Conditions

	dst.ObjectMeta = src.ObjectMeta
	return nil
}

// ConvertFrom converts the Hub version (v1alpha2) to this DeploymentGroup.
func (dst *DeploymentGroup) ConvertFrom(srcRaw ctrlrtconversion.Hub) error {
	src := srcRaw.(*v1alpha2.DeploymentGroup)
	if src.Spec.AlarmConfiguration != nil {
		alarmConfigurationCopy := &AlarmConfiguration{}
		if src.Spec.AlarmConfiguration.Alarms != nil {
			alarmListCopy := make([]*Alarm, 0, len(src.Spec.AlarmConfiguration.Alarms))
			for i, element := range src.Spec.AlarmConfiguration.Alarms {
				_ = i // non-used value guard.
				elementCopy := &Alarm{}
				if element != nil {
					alarmCopy := &Alarm{}
					alarmCopy.Name = element.Name
					elementCopy = alarmCopy
				}

				alarmListCopy = append(alarmListCopy, elementCopy)
			}
			alarmConfigurationCopy.Alarms = alarmListCopy
		}

		alarmConfigurationCopy.Enabled = src.Spec.AlarmConfiguration.Enabled
		alarmConfigurationCopy.IgnorePollAlarmFailure = src.Spec.AlarmConfiguration.IgnorePollAlarmFailure
		dst.Spec.AlarmConfiguration = alarmConfigurationCopy
	}

	dst.Spec.ApplicationName = src.Spec.ApplicationName
	if src.Spec.AutoRollbackConfiguration != nil {
		autoRollbackConfigurationCopy := &AutoRollbackConfiguration{}
		autoRollbackConfigurationCopy.Enabled = src.Spec.AutoRollbackConfiguration.Enabled
		src.Spec.AutoRollbackConfiguration.Events = autoRollbackConfigurationCopy.Events
		dst.Spec.AutoRollbackConfiguration = autoRollbackConfigurationCopy
	}

	src.Spec.AutoScalingGroups = dst.Spec.AutoScalingGroups
	if src.Spec.BlueGreenDeploymentConfiguration != nil {
		blueGreenDeploymentConfigurationCopy := &BlueGreenDeploymentConfiguration{}
		if src.Spec.BlueGreenDeploymentConfiguration.DeploymentReadyOption != nil {
			deploymentReadyOptionCopy := &DeploymentReadyOption{}
			deploymentReadyOptionCopy.ActionOnTimeout = src.Spec.BlueGreenDeploymentConfiguration.DeploymentReadyOption.ActionOnTimeout
			deploymentReadyOptionCopy.WaitTimeInMinutes = src.Spec.BlueGreenDeploymentConfiguration.DeploymentReadyOption.WaitTimeInMinutes
			blueGreenDeploymentConfigurationCopy.DeploymentReadyOption = deploymentReadyOptionCopy
		}

		if src.Spec.BlueGreenDeploymentConfiguration.GreenFleetProvisioningOption != nil {
			greenFleetProvisioningOptionCopy := &GreenFleetProvisioningOption{}
			greenFleetProvisioningOptionCopy.Action = src.Spec.BlueGreenDeploymentConfiguration.GreenFleetProvisioningOption.Action
			blueGreenDeploymentConfigurationCopy.GreenFleetProvisioningOption = greenFleetProvisioningOptionCopy
		}

		if src.Spec.BlueGreenDeploymentConfiguration.TerminateBlueInstancesOnDeploymentSuccess != nil {
			blueInstanceTerminationOptionCopy := &BlueInstanceTerminationOption{}
			blueInstanceTerminationOptionCopy.Action = src.Spec.BlueGreenDeploymentConfiguration.TerminateBlueInstancesOnDeploymentSuccess.Action
			blueInstanceTerminationOptionCopy.TerminationWaitTimeInMinutes = src.Spec.BlueGreenDeploymentConfiguration.TerminateBlueInstancesOnDeploymentSuccess.TerminationWaitTimeInMinutes
			blueGreenDeploymentConfigurationCopy.TerminateBlueInstancesOnDeploymentSuccess = blueInstanceTerminationOptionCopy
		}

		dst.Spec.BlueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationCopy
	}

	dst.Spec.DeploymentConfigName = src.Spec.DeploymentConfigName
	dst.Spec.DeploymentGroupName = src.Spec.DeploymentGroupName
	if src.Spec.DeploymentStyle != nil {
		deploymentStyleCopy := &DeploymentStyle{}
		deploymentStyleCopy.DeploymentOption = src.Spec.DeploymentStyle.DeploymentOption
		deploymentStyleCopy.DeploymentType = src.Spec.DeploymentStyle.DeploymentType
		dst.Spec.DeploymentStyle = deploymentStyleCopy
	}

	if src.Spec.EC2TagFilters != nil {
		ec2TagFilterListCopy := make([]*EC2TagFilter, 0, len(src.Spec.EC2TagFilters))
		for i, element := range src.Spec.EC2TagFilters {
			_ = i // non-used value guard.
			elementCopy := &EC2TagFilter{}
			if element != nil {
				ec2TagFilterCopy := &EC2TagFilter{}
				ec2TagFilterCopy.Key = element.Key
				ec2TagFilterCopy.Type = element.Type
				ec2TagFilterCopy.Value = element.Value
				elementCopy = ec2TagFilterCopy
			}

			ec2TagFilterListCopy = append(ec2TagFilterListCopy, elementCopy)
		}
		dst.Spec.EC2TagFilters = ec2TagFilterListCopy
	}

	if src.Spec.EC2TagSet != nil {
		ec2TagSetCopy := &EC2TagSet{}
		if src.Spec.EC2TagSet.EC2TagSetList != nil {
			ec2TagSetListCopy := make([][]*EC2TagFilter, 0, len(src.Spec.EC2TagSet.EC2TagSetList))
			for i, element := range src.Spec.EC2TagSet.EC2TagSetList {
				_ = i // non-used value guard.
				elementCopy := make([]*EC2TagFilter, 0, len(element))
				if element != nil {
					ec2TagFilterListCopy := make([]*EC2TagFilter, 0, len(element))
					for i, element := range element {
						_ = i // non-used value guard.
						elementCopy := &EC2TagFilter{}
						if element != nil {
							ec2TagFilterCopy := &EC2TagFilter{}
							ec2TagFilterCopy.Key = element.Key
							ec2TagFilterCopy.Type = element.Type
							ec2TagFilterCopy.Value = element.Value
							elementCopy = ec2TagFilterCopy
						}

						ec2TagFilterListCopy = append(ec2TagFilterListCopy, elementCopy)
					}
					elementCopy = ec2TagFilterListCopy
				}

				ec2TagSetListCopy = append(ec2TagSetListCopy, elementCopy)
			}
			ec2TagSetCopy.EC2TagSetList = ec2TagSetListCopy
		}

		dst.Spec.EC2TagSet = ec2TagSetCopy
	}

	if src.Spec.EcsServices != nil {
		eCSServiceListCopy := make([]*ECSService, 0, len(src.Spec.EcsServices))
		for i, element := range src.Spec.EcsServices {
			_ = i // non-used value guard.
			elementCopy := &ECSService{}
			if element != nil {
				eCSServiceCopy := &ECSService{}
				eCSServiceCopy.ClusterName = element.ClusterName
				eCSServiceCopy.ServiceName = element.ServiceName
				elementCopy = eCSServiceCopy
			}

			eCSServiceListCopy = append(eCSServiceListCopy, elementCopy)
		}
		dst.Spec.EcsServices = eCSServiceListCopy
	}

	if src.Spec.LoadBalancerInfo != nil {
		loadBalancerInfoCopy := &LoadBalancerInfo{}
		if src.Spec.LoadBalancerInfo.ElbInfoList != nil {
			eLBInfoListCopy := make([]*ELBInfo, 0, len(src.Spec.LoadBalancerInfo.ElbInfoList))
			for i, element := range src.Spec.LoadBalancerInfo.ElbInfoList {
				_ = i // non-used value guard.
				elementCopy := &ELBInfo{}
				if element != nil {
					eLBInfoCopy := &ELBInfo{}
					eLBInfoCopy.Name = element.Name
					elementCopy = eLBInfoCopy
				}

				eLBInfoListCopy = append(eLBInfoListCopy, elementCopy)
			}
			loadBalancerInfoCopy.ElbInfoList = eLBInfoListCopy
		}

		if src.Spec.LoadBalancerInfo.TargetGroupInfoList != nil {
			targetGroupInfoListCopy := make([]*TargetGroupInfo, 0, len(src.Spec.LoadBalancerInfo.TargetGroupInfoList))
			for i, element := range src.Spec.LoadBalancerInfo.TargetGroupInfoList {
				_ = i // non-used value guard.
				elementCopy := &TargetGroupInfo{}
				if element != nil {
					targetGroupInfoCopy := &TargetGroupInfo{}
					targetGroupInfoCopy.Name = element.Name
					elementCopy = targetGroupInfoCopy
				}

				targetGroupInfoListCopy = append(targetGroupInfoListCopy, elementCopy)
			}
			loadBalancerInfoCopy.TargetGroupInfoList = targetGroupInfoListCopy
		}

		if src.Spec.LoadBalancerInfo.TargetGroupPairInfoList != nil {
			targetGroupPairInfoListCopy := make([]*TargetGroupPairInfo, 0, len(src.Spec.LoadBalancerInfo.TargetGroupPairInfoList))
			for i, element := range src.Spec.LoadBalancerInfo.TargetGroupPairInfoList {
				_ = i // non-used value guard.
				elementCopy := &TargetGroupPairInfo{}
				if element != nil {
					targetGroupPairInfoCopy := &TargetGroupPairInfo{}
					if element.ProdTrafficRoute != nil {
						trafficRouteCopy := &TrafficRoute{}
						element.ProdTrafficRoute.ListenerARNs = trafficRouteCopy.ListenerARNs
						targetGroupPairInfoCopy.ProdTrafficRoute = trafficRouteCopy
					}

					if element.TargetGroups != nil {
						targetGroupInfoListCopy := make([]*TargetGroupInfo, 0, len(element.TargetGroups))
						for i, element := range element.TargetGroups {
							_ = i // non-used value guard.
							elementCopy := &TargetGroupInfo{}
							if element != nil {
								targetGroupInfoCopy := &TargetGroupInfo{}
								targetGroupInfoCopy.Name = element.Name
								elementCopy = targetGroupInfoCopy
							}

							targetGroupInfoListCopy = append(targetGroupInfoListCopy, elementCopy)
						}
						targetGroupPairInfoCopy.TargetGroups = targetGroupInfoListCopy
					}

					if element.TestTrafficRoute != nil {
						trafficRouteCopy := &TrafficRoute{}
						element.TestTrafficRoute.ListenerARNs = trafficRouteCopy.ListenerARNs
						targetGroupPairInfoCopy.TestTrafficRoute = trafficRouteCopy
					}

					elementCopy = targetGroupPairInfoCopy
				}

				targetGroupPairInfoListCopy = append(targetGroupPairInfoListCopy, elementCopy)
			}
			loadBalancerInfoCopy.TargetGroupPairInfoList = targetGroupPairInfoListCopy
		}

		dst.Spec.LoadBalancerInfo = loadBalancerInfoCopy
	}

	if src.Spec.OnPremisesInstanceTagFilters != nil {
		tagFilterListCopy := make([]*TagFilter, 0, len(src.Spec.OnPremisesInstanceTagFilters))
		for i, element := range src.Spec.OnPremisesInstanceTagFilters {
			_ = i // non-used value guard.
			elementCopy := &TagFilter{}
			if element != nil {
				tagFilterCopy := &TagFilter{}
				tagFilterCopy.Key = element.Key
				tagFilterCopy.Type = element.Type
				tagFilterCopy.Value = element.Value
				elementCopy = tagFilterCopy
			}

			tagFilterListCopy = append(tagFilterListCopy, elementCopy)
		}
		dst.Spec.OnPremisesInstanceTagFilters = tagFilterListCopy
	}

	if src.Spec.OnPremisesTagSet != nil {
		onPremisesTagSetCopy := &OnPremisesTagSet{}
		if src.Spec.OnPremisesTagSet.OnPremisesTagSetList != nil {
			onPremisesTagSetListCopy := make([][]*TagFilter, 0, len(src.Spec.OnPremisesTagSet.OnPremisesTagSetList))
			for i, element := range src.Spec.OnPremisesTagSet.OnPremisesTagSetList {
				_ = i // non-used value guard.
				elementCopy := make([]*TagFilter, 0, len(element))
				if element != nil {
					tagFilterListCopy := make([]*TagFilter, 0, len(element))
					for i, element := range element {
						_ = i // non-used value guard.
						elementCopy := &TagFilter{}
						if element != nil {
							tagFilterCopy := &TagFilter{}
							tagFilterCopy.Key = element.Key
							tagFilterCopy.Type = element.Type
							tagFilterCopy.Value = element.Value
							elementCopy = tagFilterCopy
						}

						tagFilterListCopy = append(tagFilterListCopy, elementCopy)
					}
					elementCopy = tagFilterListCopy
				}

				onPremisesTagSetListCopy = append(onPremisesTagSetListCopy, elementCopy)
			}
			onPremisesTagSetCopy.OnPremisesTagSetList = onPremisesTagSetListCopy
		}

		dst.Spec.OnPremisesTagSet = onPremisesTagSetCopy
	}

	dst.Spec.OutdatedInstancesStrategy = src.Spec.OutdatedInstancesStrategy
	dst.Spec.ServiceRoleARN = src.Spec.ServiceRoleARN
	if src.Spec.Tags != nil {
		tagListCopy := make([]*Tag, 0, len(src.Spec.Tags))
		for i, element := range src.Spec.Tags {
			_ = i // non-used value guard.
			elementCopy := &Tag{}
			if element != nil {
				tagCopy := &Tag{}
				tagCopy.Key = element.Key
				tagCopy.Value = element.Value
				elementCopy = tagCopy
			}

			tagListCopy = append(tagListCopy, elementCopy)
		}
		dst.Spec.Tags = tagListCopy
	}

	if src.Spec.TriggerConfigurations != nil {
		triggerConfigListCopy := make([]*TriggerConfig, 0, len(src.Spec.TriggerConfigurations))
		for i, element := range src.Spec.TriggerConfigurations {
			_ = i // non-used value guard.
			elementCopy := &TriggerConfig{}
			if element != nil {
				triggerConfigCopy := &TriggerConfig{}
				element.TriggerEvents = triggerConfigCopy.TriggerEvents
				triggerConfigCopy.TriggerName = element.TriggerName
				triggerConfigCopy.TriggerTargetARN = element.TriggerTargetARN
				elementCopy = triggerConfigCopy
			}

			triggerConfigListCopy = append(triggerConfigListCopy, elementCopy)
		}
		dst.Spec.TriggerConfigurations = triggerConfigListCopy
	}

	dst.Status.DeploymentGroupID = src.Status.DeploymentGroupID
	dst.Status.ACKResourceMetadata = src.Status.ACKResourceMetadata
	dst.Status.Conditions = src.Status.Conditions

	dst.ObjectMeta = src.ObjectMeta
	return nil
}