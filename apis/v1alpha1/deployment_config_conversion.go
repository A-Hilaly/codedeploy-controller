// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.


package v1alpha1

import (
    "encoding/json"
    "fmt"

    ctrlrtconversion "sigs.k8s.io/controller-runtime/pkg/conversion"
    ctrlrt "sigs.k8s.io/controller-runtime"
    ackrtwh "github.com/aws-controllers-k8s/runtime/pkg/webhook"

    v1alpha2 "github.com/aws-controllers-k8s/codedeploy-controller/apis/v1alpha2"
)

var (
    _ = fmt.Printf
    _ = json.Marshal
)

func init() {
    webhook := ackrtwh.New(
        "conversion",
        "DeploymentConfig",
        "v1alpha1",
		func(mgr ctrlrt.Manager) error {
			return ctrlrt.NewWebhookManagedBy(mgr).
				For(&DeploymentConfig{}).
				Complete()
		},
    )
    if err := ackrtwh.RegisterWebhook(webhook); err != nil {
        msg := fmt.Sprintf("cannot register webhook: %v", err)
        panic(msg)
    }
}

// Assert convertible interface implementation DeploymentConfig
var _ ctrlrtconversion.Convertible = &DeploymentConfig{}

// ConvertTo converts this DeploymentConfig to the Hub version (v1alpha2).
func (src *DeploymentConfig) ConvertTo(dstRaw ctrlrtconversion.Hub) error {
	dst := dstRaw.(*v1alpha2.DeploymentConfig)
	dst.Spec.ComputePlatform = src.Spec.ComputePlatform
	dst.Spec.DeploymentConfigName = src.Spec.DeploymentConfigName
	if src.Spec.MinimumHealthyHosts != nil {
		minimumHealthyHostsCopy := &v1alpha2.MinimumHealthyHosts{}
		minimumHealthyHostsCopy.Type = src.Spec.MinimumHealthyHosts.Type
		minimumHealthyHostsCopy.Value = src.Spec.MinimumHealthyHosts.Value
		dst.Spec.MinimumHealthyHosts = minimumHealthyHostsCopy
	}

	if src.Spec.TrafficRoutingConfig != nil {
		trafficRoutingConfigCopy := &v1alpha2.TrafficRoutingConfig{}
		if src.Spec.TrafficRoutingConfig.TimeBasedCanary != nil {
			timeBasedCanaryCopy := &v1alpha2.TimeBasedCanary{}
			timeBasedCanaryCopy.CanaryInterval = src.Spec.TrafficRoutingConfig.TimeBasedCanary.CanaryInterval
			timeBasedCanaryCopy.CanaryPercentage = src.Spec.TrafficRoutingConfig.TimeBasedCanary.CanaryPercentage
			trafficRoutingConfigCopy.TimeBasedCanary = timeBasedCanaryCopy
		}

		if src.Spec.TrafficRoutingConfig.TimeBasedLinear != nil {
			timeBasedLinearCopy := &v1alpha2.TimeBasedLinear{}
			timeBasedLinearCopy.LinearInterval = src.Spec.TrafficRoutingConfig.TimeBasedLinear.LinearInterval
			timeBasedLinearCopy.LinearPercentage = src.Spec.TrafficRoutingConfig.TimeBasedLinear.LinearPercentage
			trafficRoutingConfigCopy.TimeBasedLinear = timeBasedLinearCopy
		}

		trafficRoutingConfigCopy.Type = src.Spec.TrafficRoutingConfig.Type
		dst.Spec.TrafficRoutingConfig = trafficRoutingConfigCopy
	}

	dst.Status.DeploymentConfigID = src.Status.DeploymentConfigID
	dst.Status.ACKResourceMetadata = src.Status.ACKResourceMetadata
	dst.Status.Conditions = src.Status.Conditions

	dst.ObjectMeta = src.ObjectMeta
	return nil
}

// ConvertFrom converts the Hub version (v1alpha2) to this DeploymentConfig.
func (dst *DeploymentConfig) ConvertFrom(srcRaw ctrlrtconversion.Hub) error {
	src := srcRaw.(*v1alpha2.DeploymentConfig)
	dst.Spec.ComputePlatform = src.Spec.ComputePlatform
	dst.Spec.DeploymentConfigName = src.Spec.DeploymentConfigName
	if src.Spec.MinimumHealthyHosts != nil {
		minimumHealthyHostsCopy := &MinimumHealthyHosts{}
		minimumHealthyHostsCopy.Type = src.Spec.MinimumHealthyHosts.Type
		minimumHealthyHostsCopy.Value = src.Spec.MinimumHealthyHosts.Value
		dst.Spec.MinimumHealthyHosts = minimumHealthyHostsCopy
	}

	if src.Spec.TrafficRoutingConfig != nil {
		trafficRoutingConfigCopy := &TrafficRoutingConfig{}
		if src.Spec.TrafficRoutingConfig.TimeBasedCanary != nil {
			timeBasedCanaryCopy := &TimeBasedCanary{}
			timeBasedCanaryCopy.CanaryInterval = src.Spec.TrafficRoutingConfig.TimeBasedCanary.CanaryInterval
			timeBasedCanaryCopy.CanaryPercentage = src.Spec.TrafficRoutingConfig.TimeBasedCanary.CanaryPercentage
			trafficRoutingConfigCopy.TimeBasedCanary = timeBasedCanaryCopy
		}

		if src.Spec.TrafficRoutingConfig.TimeBasedLinear != nil {
			timeBasedLinearCopy := &TimeBasedLinear{}
			timeBasedLinearCopy.LinearInterval = src.Spec.TrafficRoutingConfig.TimeBasedLinear.LinearInterval
			timeBasedLinearCopy.LinearPercentage = src.Spec.TrafficRoutingConfig.TimeBasedLinear.LinearPercentage
			trafficRoutingConfigCopy.TimeBasedLinear = timeBasedLinearCopy
		}

		trafficRoutingConfigCopy.Type = src.Spec.TrafficRoutingConfig.Type
		dst.Spec.TrafficRoutingConfig = trafficRoutingConfigCopy
	}

	dst.Status.DeploymentConfigID = src.Status.DeploymentConfigID
	dst.Status.ACKResourceMetadata = src.Status.ACKResourceMetadata
	dst.Status.Conditions = src.Status.Conditions

	dst.ObjectMeta = src.ObjectMeta
	return nil
}